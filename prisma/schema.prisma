// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(LANDLORD)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  properties   Property[]
  activities   Activity[]
  notifications Notification[]

  @@map("users")
}

model Property {
  id          String        @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  type        PropertyType
  bedrooms    Int
  bathrooms   Float
  squareFeet  Int?
  rent        Float
  deposit     Float?
  description String?
  amenities   String[]
  images      String[]
  status      PropertyStatus @default(AVAILABLE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  tenants     Tenant[]
  leases      Lease[]
  payments    Payment[]
  maintenance MaintenanceRequest[]
  activities  Activity[]

  @@map("properties")
}

model Tenant {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String
  phone       String?
  password    String
  dateOfBirth DateTime?
  occupation  String?
  income      Float?
  status      TenantStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  leases      Lease[]
  payments    Payment[]
  documents   Document[]
  maintenance MaintenanceRequest[]
  activities  Activity[]
  notifications Notification[]

  @@map("tenants")
}

model Lease {
  id           String      @id @default(cuid())
  startDate    DateTime
  endDate      DateTime
  rentAmount   Float
  depositAmount Float?
  terms        String?
  status       LeaseStatus @default(ACTIVE)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  payments   Payment[]
  documents  Document[]
  activities Activity[]

  @@map("leases")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  dueDate       DateTime
  paidDate      DateTime?
  method        PaymentMethod @default(BANK_TRANSFER)
  status        PaymentStatus @default(PENDING)
  description   String?
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  leaseId String?
  lease   Lease?  @relation(fields: [leaseId], references: [id], onDelete: SetNull)

  activities Activity[]

  @@map("payments")
}

model MaintenanceRequest {
  id          String            @id @default(cuid())
  title       String
  description String
  priority    MaintenancePriority @default(MEDIUM)
  status      MaintenanceStatus @default(OPEN)
  images      String[]
  cost        Float?
  completedAt DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  activities Activity[]

  @@map("maintenance_requests")
}

model Document {
  id       String      @id @default(cuid())
  name     String
  type     DocumentType
  url      String
  size     Int?
  mimeType String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  leaseId String?
  lease   Lease?  @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  createdAt   DateTime     @default(now())

  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  leaseId String?
  lease   Lease?  @relation(fields: [leaseId], references: [id], onDelete: SetNull)

  paymentId String?
  payment   Payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  maintenanceId String?
  maintenance   MaintenanceRequest? @relation(fields: [maintenanceId], references: [id], onDelete: SetNull)

  @@map("activities")
}

model Notification {
  id        String             @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean            @default(false)
  createdAt DateTime           @default(now())

  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN
  LANDLORD
  PROPERTY_MANAGER
}

enum PropertyType {
  APARTMENT
  HOUSE
  CONDO
  TOWNHOUSE
  STUDIO
  COMMERCIAL
}

enum PropertyStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  UNAVAILABLE
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  PENDING
  TERMINATED
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  MPESA
  CHECK
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL
  FAILED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DocumentType {
  LEASE_AGREEMENT
  ID_COPY
  INCOME_PROOF
  RECEIPT
  MAINTENANCE_REPORT
  INSPECTION_REPORT
  OTHER
}

enum ActivityType {
  USER_LOGIN
  USER_LOGOUT
  PROPERTY_CREATED
  PROPERTY_UPDATED
  PROPERTY_DELETED
  TENANT_CREATED
  TENANT_UPDATED
  TENANT_DELETED
  LEASE_CREATED
  LEASE_UPDATED
  LEASE_TERMINATED
  PAYMENT_CREATED
  PAYMENT_UPDATED
  PAYMENT_RECEIVED
  MAINTENANCE_CREATED
  MAINTENANCE_UPDATED
  MAINTENANCE_COMPLETED
  DOCUMENT_UPLOADED
  DOCUMENT_DELETED
}

enum NotificationType {
  PAYMENT_DUE
  PAYMENT_RECEIVED
  PAYMENT_OVERDUE
  LEASE_EXPIRING
  MAINTENANCE_REQUEST
  MAINTENANCE_COMPLETED
  SYSTEM_ALERT
  GENERAL
}
